token PGM_START "PROGRAM"
token PGM_END "BYE"
token PRINT "PRINT"
token VAR "VAR"
token IF "IF"
token THEN "THEN"
token ENDIF "ENDIF"
token SEMICOLON ";"
token ASSIGN "="
token EQUALS "=="
token PLUS "+"
token TRUE "true"
token FALSE "false"

rule universe::lambda::jlcl::parser::Library library PGM_START statement PGM_END
rule universe::lambda::jlcl::parser::EnglobingStatement statement statement statement

rule universe::lambda::jlcl::parser::Var statement VAR IDENTIFIER ";"
rule universe::lambda::jlcl::parser::Var statement VAR IDENTIFIER "=" valueexpr ";"
rule universe::lambda::jlcl::parser::Var statement VAR IDENTIFIER "=" IDENTIFIER ";"
rule universe::lambda::jlcl::parser::Assign statement IDENTIFIER "=" valueexpr ";"

rule universe::lambda::jlcl::parser::Print statement PRINT valueexpr ";"

rule universe::lambda::jlcl::parser::Noop statement ";"

rule universe::lambda::jlcl::parser::SimpleIf statement IF boolexpr THEN statement ENDIF

# rule universe::lambda::jlcl::parser::ValueExpr valueexpr IDENTIFIER
rule universe::lambda::jlcl::parser::ValueExpr valueexpr INTEGER
rule universe::lambda::jlcl::parser::ValueExpr valueexpr FLOAT
rule universe::lambda::jlcl::parser::ValueExpr valueexpr STRING
rule universe::lambda::jlcl::parser::ValueExpr valueexpr CHAR
# rule universe::lambda::jlcl::parser::ValueExpr valueexpr boolexpr
rule universe::lambda::jlcl::parser::ValueExpr valueexpr valueexpr "+" valueexpr
rule universe::lambda::jlcl::parser::ValueExpr valueexpr IDENTIFIER "+" valueexpr
rule universe::lambda::jlcl::parser::ValueExpr valueexpr valueexpr "+" IDENTIFIER
rule universe::lambda::jlcl::parser::ValueExpr valueexpr IDENTIFIER "+" IDENTIFIER

rule universe::lambda::jlcl::parser::BoolExpr boolexpr TRUE
rule universe::lambda::jlcl::parser::BoolExpr boolexpr FALSE
rule universe::lambda::jlcl::parser::BoolExpr boolexpr valueexpr "==" valueexpr
rule universe::lambda::jlcl::parser::BoolExpr boolexpr IDENTIFIER "==" valueexpr
rule universe::lambda::jlcl::parser::BoolExpr boolexpr IDENTIFIER "==" IDENTIFIER
rule universe::lambda::jlcl::parser::BoolExpr boolexpr valueexpr "==" IDENTIFIER
